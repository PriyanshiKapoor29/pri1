class Interval:
    def __init__(self, start, end):
        self.start = start
        self.end = end

    def __repr__(self):
        return f"[{self.start}, {self.end}]"

class IntervalSet:
    def __init__(self):
        self.intervals =

    def add_interval(self, new_interval):
        """Adds a new interval and merges overlapping intervals."""
        self.intervals.append(new_interval)
        self.intervals.sort(key=lambda x: x.start)  # Sort by start time
        self.merge_intervals()

    def merge_intervals(self):
        """Merges overlapping intervals."""
        if not self.intervals:
            return

        merged_intervals =
        current_interval = self.intervals[0]

        for i in range(1, len(self.intervals)):
            next_interval = self.intervals[i]

            if current_interval.end >= next_interval.start:
                # Overlapping intervals, merge them
                current_interval.end = max(current_interval.end, next_interval.end)
            else:
                # Non-overlapping intervals, add current and update
                merged_intervals.append(current_interval)
                current_interval = next_interval

        merged_intervals.append(current_interval)  # Add the last interval
        self.intervals = merged_intervals

    def get_intervals(self):
        """Returns the set of non-overlapping intervals."""
        return self.intervals

# Example Usage
interval_set = IntervalSet()

interval_set.add_interval(Interval(1, 3))
print(interval_set.get_intervals())  # Output:
