class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0  # Keep track of the list size

    def create_node(self, data):
        """Creates a new node."""
        return Node(data)

    def insert_at_beginning(self, data):
        """Inserts a new node at the beginning of the list."""
        new_node = self.create_node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
        self.size += 1

    def insert_at_end(self, data):
        """Inserts a new node at the end of the list."""
        new_node = self.create_node(data)
        if self.head is None:
            self.head = new_node
            self.tail = new_node
        else:
            self.tail.next = new_node
            new_node.prev = self.tail
            self.tail = new_node
        self.size += 1

    def insert_at_position(self, data, position):
        """Inserts a new node at a given position."""
        if position < 0 or position > self.size:
            print("Invalid position.")
            return

        if position == 0:
            self.insert_at_beginning(data)
        elif position == self.size:
            self.insert_at_end(data)
        else:
            new_node = self.create_node(data)
            current = self.head
            for _ in range(position - 1):
                current = current.next

            new_node.next = current.next
            new_node.prev = current
            current.next.prev = new_node
            current.next = new_node
            self.size += 1

    def traverse_forward(self):
        """Traverses the list from head to tail."""
        current = self.head
        while current:
            print(current.data, end=" <-> ")
            current = current.next
        print("None")

    def traverse_backward(self):
        """Traverses the list from tail to head."""
        current = self.tail
        while current:
            print(current.data, end=" <-> ")
            current = current.prev
        print("None")

    def print_list(self):
        """Prints the list (same as forward traversal)."""
        self.traverse_forward()

# Example Usage
dll = DoublyLinkedList()

dll.insert_at_end(10)
dll.insert_at_end(20)
dll.insert_at_beginning(5)
dll.insert_at_position(15, 2)

print("Forward Traversal:")
dll.traverse_forward()

print("Backward Traversal:")
dll.traverse_backward()

print("Printing the list:")
dll.print_list()

print("List size:", dll.size)
